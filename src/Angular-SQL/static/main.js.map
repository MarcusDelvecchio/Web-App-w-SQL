{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/app-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { CommonModule } from '@angular/common';  \nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { driverinformation } from './driverinformation';\nimport { locationproductquantites } from './locationproductquantities';\nimport { drivervehicle } from './drivervehicle';\nimport { displayMaxPrice } from './inputMaxPrice';\nimport { MatTableModule } from '@angular/material/table';\n\n@Injectable()\nexport class ConfigService {\n\n  url = \"\";\n\n  // private linkstring: string = \"http://localhost:3300/api/database/:query\" //+this.query; ??\n\n  constructor(private http: HttpClient, private MatTableModule: MatTableModule) { }\n\n  driverInfoRoute(queryString: string): Observable <driverinformation[]> {\n    queryString = this.convertToValid(queryString);\n    //console.log(queryString);\n    let query = `${this.url}/api/database/${queryString}`;\n    return this.http.get<driverinformation[]>(query);\n  }\n\n  currentShifts(queryString: string) {\n    // TODO: make more deezed -MD\n\n    let query = this.convertToValid(\"SELECT * FROM `3309`.Shift WHERE endTime IS NULL;\");\n    \n    return this.http.get(`${this.url}/api/database/${query}`);\n  }\n\n  locationproductconfig(queryString: string) {\n    queryString = this.convertToValid(queryString);\n    //console.log(queryString);\n    let query = `${this.url}/api/database/${queryString}`;\n    return this.http.get(query);\n  }\n  getdriverlicenceplate(queryString: string): Observable <drivervehicle[]> {\n    queryString = this.convertToValid(queryString);\n    //console.log(queryString);\n    let query = `${this.url}/api/database/${queryString}`;\n    return this.http.get<drivervehicle[]>(query);\n  }\n\n  maxPrice(queryString: string): Observable <displayMaxPrice[]> {\n  queryString = this.convertToValid(queryString);\n    //console.log(queryString);\n    let query = `${this.url}/api/database/${queryString}`;\n    return this.http.get<displayMaxPrice[]>(query);\n  }\n\n  convertToValid(str){\n    let validQueryParam = str.replace(/ /g, \"BXB\");\n    validQueryParam = validQueryParam.replace(/\\*/g, \"AXA\");\n    return validQueryParam;\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent implements OnInit {\n\n  title = 'Angular-SQL';\n\n  constructor(private configService: ConfigService){\n    this.showShiftTable = false;\n    this.showNewShift = false;\n  }\n\n  // constants\n  database = \"`3309`.\";\n  \n  // data members\n  drivertableData;  // driver data to be rendered into the table\n  columnsToDisplay = ['driverID', 'driverAddress', \"driverName\"];\n  driverVehicles;\n  currentShifts;\n\n  // section/element toggles\n  showDrivertableData;\n  showLocationtableData;\n  showCreateDriver\n  showShiftTable;\n  showNewShift;\n  showProductQuantitiesLocationTable;\n  showlicenseplates;\n  loggedIn: boolean = false;\n\n  // tracking and other meaningless values\n  driverIdNumber;\n  shiftIdNumber\n  drivervehicle;\n  displayMaxPrice;\n  showPriceSearchResults: boolean = false;\n  \n\n  populateDriverTable(){}\n  \n  getDrivers(){\n\n      // setup string\n      let queryString = `SELECT * FROM ${this.database}Driver`;\n\n      this.configService.driverInfoRoute(queryString).subscribe(data => {\n\n          //console.log(data);\n\n        // set the data and show it in the tables\n          this.drivertableData = data;\n          this.showDrivertableData = true;\n\n        // set the id value\n          this.driverIdNumber = data.length -1;\n      });\n  }\n  \n\n  newDriver(){\n    this.showCreateDriver = !this.showCreateDriver;\n  }\n\n  submitNewDriver(){\n\n    // get input values \n    let name = (document.getElementById(\"newDriverName\") as HTMLInputElement).value;\n    let address = (document.getElementById(\"newDriverAddress\") as HTMLInputElement).value;\n    \n    // sanitize??\n    \n    // generate a driver \n    let id = this.driverIdNumber;\n\n    // setup query string\n    let queryString = `INSERT INTO ${this.database}Driver (DriverAddress, DriverID, driverName) VALUES ('${address}', '${id}', '${name}')`;\n    //console.log(queryString);\n\n    // call query method\n    this.configService.driverInfoRoute(queryString).subscribe(data => {\n        // INSERT returns undefined\n        //console.log(data);\n        //console.log(\"updated driver info\");\n    });\n\n    // update local driver info\n    this.getDrivers();\n  }\n\n  submitNewShift(){\n\n    // get input values \n    let driverId = (document.getElementById(\"newShiftId\") as HTMLInputElement).value;\n    let shiftDate = (document.getElementById(\"newShiftshiftDate\") as HTMLInputElement).value;\n    let startTime = (document.getElementById(\"newShiftstartTime\") as HTMLInputElement).value;\n    let endTime = (document.getElementById(\"newShiftendTime\") as HTMLInputElement).value;\n    \n    // TODO: sanitize??\n\n    // get running shift id\n    let id = this.shiftIdNumber;\n\n    // setup query string\n    let queryString = `INSERT INTO ${this.database}Shift (driverId, shiftDate, startTime, endTime) VALUES ('${driverId}', '${shiftDate}', '${startTime}', '${endTime}')`;\n    //console.log(queryString);\n\n    // call query method\n    this.configService.currentShifts(queryString).subscribe(data => {\n      // INSERT returns undefined\n      //console.log(data);\n      //console.log(\"updated shift info\");\n    });\n\n    // update local shift info\n    this.getCurrentShifts();\n  }\n  \n  getLicensePlateOfDriver () {\n    // fixed -ML\n\n      let queryString = \"SELECT Driver.driverID, licensePlate FROM `3309`.Driver JOIN `3309`.Vehicle ON Driver.driverID = Vehicle.driverID;\"\n      \n      //gets the ids of the driver and their licence plate\n\n      this.configService.getdriverlicenceplate(queryString).subscribe(data => {\n        //console.log(data);\n        this.drivervehicle = data;\n        this.showLocationtableData = true;\n      }); \n  }\n\n  getLocationProductQuantities() {\n    // TODO: fix?\n\n    // setup string\n    let queryString = \"SELECT driverID, licensePlate, kmLeft FROM `3309`.Vehicle WHERE EXISTS (SELECT licensePlate FROM `3309`.Vehicle WHERE Vehicle.kmLeft > 70);\"\n\n    this.configService.locationproductconfig(queryString).subscribe(data => {\n      //console.log(data);\n      this.driverVehicles = data;\n      this.showLocationtableData = true;\n    });    \n  }\n\n  clickShowProudctPrice() {\n    this.showPriceSearchResults = !this.showPriceSearchResults;\n  }\n\n  showProductsLessThanACertainPrice() {\n\n    if(document.getElementById(\"price\") as HTMLInputElement === null){\n      return;\n    }\n    let price = (document.getElementById(\"price\") as HTMLInputElement).value;\n\n    let queryString = \"SELECT productName, productISBN, productPrice FROM Product WHERE productPrice < \"+price+\" GROUP BY productName, productISBN, productPrice;\"\n\n    this.configService.maxPrice(queryString).subscribe(data => {\n      //console.log(data);\n      this.displayMaxPrice = data;\n      //this.showLocationtableData = true;\n    });    \n  }\n\n  \n  // this.shiftIdNumber = data.length -1\n  getCurrentShifts() {\n    //console.log(\"getting shifts\");\n    this.configService.currentShifts(\"\").subscribe(\n      data => { \n        this.currentShifts = data;\n        this.shiftIdNumber = Object.keys(data).length -1;\n      },\n      err => console.log(err))\n  }\n\n  checkLoggedIn() {\n    let value = localStorage.getItem('loggedIn');\n    if (value === 'true') {\n      this.loggedIn = true;\n    }\n    else {\n      this.loggedIn = false;\n    }\n  }\n\n  // returns true if the passed string contains only characters, numbers, spaces and underscores\n  // boolean flase == allow spaces\n  sanitize(input: string, isCourseCode: boolean): boolean {\n    let expressionAllowSpaces = new RegExp('^[a-zA-Z0-9 _]{0,15}$'); \n    let expressionNoSpaces = new RegExp('^[a-zA-Z0-9]{0,15}$'); \n    let newExpression = new RegExp(\"[<\\\"\\/>%\\$&#@\\[\\\\\\^\\$\\.\\|\\?\\*\\+\\(\\)\\{\\}]\");\n\n    if(!isCourseCode){\n      if(newExpression.test(input)){\n        return false;\n      }else{\n        return true;\n      }\n    }else{\n      if(expressionNoSpaces.test(input)){\n        return true;\n      }else{\n        return false;\n      }\n    }\n  };\n\n\n  ngOnInit(){\n\n    // get locaton / product table info\n    this.driverVehicles = [];\n    this.getLocationProductQuantities();\n\n    // get shift data\n\n    this.getCurrentShifts();\n\n    this.displayMaxPrice = [];\n    //this.showProductsLessThanACertainPrice();\n\n    this.drivervehicle = [];\n    this.getLicensePlateOfDriver()\n\n    this.checkLoggedIn();\n\n    // get the driver data\n    this.drivertableData = [];\n    this.getDrivers();\n  }\n}\n","<h1><img src=\"assets/img-01.jpg\" width=\"100px\" height=\"auto\" /></h1>\n\n<nav>\n        <ul class=\"navbar\">\n                <li><a routerLink=\"\">Home</a></li>\n                <li><a routerLink=\"/login\">Login</a></li>\n        </ul>\n</nav>\n\n<div class=\"belowImage\">\n        <div class=\"info\">\n                <h1>About:</h1>\n                <p>A software application used by vending drivers to manage daily operations. It will help organize and\n                        optimize the management of various tasks such as sales, inventory, delivery details, and other\n                        entities in daily business. Drivers will use the app to record and sort information regarding\n                        their job. </p>\n        </div>\n</div>\n<div class=\"wrapper\">\n        <router-outlet></router-outlet>\n        <div> <!-- change to \" *ngIf=\"loggedIn\" // temp rn-->\n\n                <hr>\n\n                <!-- Buttons -->\n                <div style=\"border: 1px solid black; padding: 5px;\">\n                        <h2>Controls</h2>\n                        <div>\n                                <table>\n                                        <tr>\n                                                <td>\n                                                        Create Functionalities\n                                                        <div>\n                                                                <button (click)=\"newDriver()\">New Driver</button>\n                                                                <button (click)=\"showNewShift = !showNewShift\">Create new Shift</button><!-- currentShifts -->\n                                                        </div>\n                                                </td>\n\n                                                <td>\n                                                        Table Toggles\n                                                        <div>\n                                                                <button (click)=\"showShiftTable = !showShiftTable\">Show shift info</button><!-- currentShifts -->\n                                                                \n                                                                <button (click)=\"showLocationtableData = !showLocationtableData\">Toggle Driver Mileage</button>\n                                                                <button (click)=\"showProductQuantitiesLocationTable = !showProductQuantitiesLocationTable\">Display the product quantities at location</button>\n                                                                <button (click)=\"showDrivertableData = !showDrivertableData\">Toggle Driver Table</button>\n                                                                <button (click)=\"showlicenseplates = !showlicenseplates\">Display driver license plate</button>\n                                                        </div>\n                                                </td>\n                                        </tr>\n                                </table>\n                        </div>\n                </div>\n\n                <!-- CREATE DRIVER, SHIFT SECTION-->\n\n                        <div>\n                                \n                                <div *ngIf=\"showNewShift\">\n                                        DriverId<input type=\"text\" id=\"newShiftId\">\n                                        shiftDate<input type=\"text\" id=\"newShiftshiftDate\">\n                                        startTime<input type=\"text\" id=\"newShiftstartTime\">\n                                        endTime<input type=\"text\" id=\"newShiftendTime\">\n                                        <button (click)=\"submitNewShift()\">Submit</button>\n                                </div>\n                        </div>\n\n\n\n                        <div style=\"padding: 10px;\">\n                                <div *ngIf=\"showCreateDriver\" style=\"background-color: lightblue; width: 30%; border: 1px solid black;\">\n                                        Name<input type=\"text\" id=\"newDriverName\">\n                                        Address<input type=\"text\" id=\"newDriverAddress\">\n                                        <button (click)=\"submitNewDriver()\">Submit</button>\n                                </div>\n                        </div>\n                        \n\n                <!--  ## DATA TABLES ##  -->\n                \n                        <div class=\"tableContainer\" *ngIf=\"showShiftTable\">\n                                <h2 class=\"tableLabel\" (click)=\"showShiftTable = !showShiftTable\">Shift Info Table</h2>\n                                <table class=\"innerTable\">\n                                        <tr>\n                                                <td>\n                                                        <div>DriverId</div>\n                                                </td>\n                                                <td>\n                                                        <div>shiftDate</div>\n                                                </td>\n                                                <td>\n                                                        <div>startTime</div>\n                                                </td>\n                                                <td>\n                                                        <div>endTime</div>\n                                                </td>\n                                                <!-- <th class=\"scrollbarhead\"></th> -->\n                                        </tr>\n                                        <tr></tr>\n\n                                        <tr *ngFor=\"let shift of currentShifts\">\n                                                <td>{{ shift.driverName }}</td>\n                                                <td>{{ shift.shiftDate }}</td>\n                                                <td>{{ shift.startTime }}</td>\n                                                <td>{{ shift.endTime }}</td>\n                                        </tr>\n                                </table>         \n                        </div>\n\n                <!-- DRIVER INFO TABLE -->\n                        <div *ngIf=\"showDrivertableData\" class=\"tableContainer\">\n                                <h2 class=\"tableLabel\" (click)=\"showDrivertableData = !showDrivertableData\"> Driver Info Table</h2>\n                                        <table class=\"innerTable\">\n                                                <tr>\n                                                        <td>Name</td>\n                                                        <td>ID</td>\n                                                        <td>Address</td>\n                                                </tr>\n                                                <tr></tr>\n                                                <tr *ngFor=\"let driver of drivertableData\">\n                                                        <td>{{ driver.driverName }}</td>\n                                                        <td>{{ driver.driverID }}</td>\n                                                        <td>{{ driver.driverAddress }}</td>\n                                                </tr>\n                                        </table>\n                                </div>\n\n                <!-- LOCATION TABLE INFO -->\n                <div class=\"tableContainer\"  *ngIf=\"showLocationtableData\">\n                        <h2 class=\"tableLabel\" (click)=\"showLocationtableData = !showLocationtableData\" >Driver's with more than 70 km</h2>\n                        <table class=\"innerTable\">\n                                <tr>\n                                        <td>Driver ID</td>\n                                        <td>License Plate</td>\n                                        <td>KM Left</td>\n                                </tr>\n                                <tr></tr>\n                                <tr *ngFor=\"let d of driverVehicles\">\n                                        <td>{{ d.driverID }}</td>\n                                        <td>{{ d.licensePlate }}</td>\n                                        <td>{{ d.kmLeft }}</td>\n                                </tr>\n                        </table>\n                </div>\n\n                <!-- Display the product quantities at location -->\n                <div class=\"tableContainer\" class=\"tableContainer\">\n                        <table *ngIf=\"showProductQuantitiesLocationTable\" class=\"innerTable\">\n                                <tr>\n                                        <th>Location Name</th>\n                                        <th>Machine Number</th>\n                                        <th>Product Name</th>\n                                        <th>Quantity</th>\n                                </tr>\n                                <tr *ngFor=\"let quant of locationproductquantites\">\n                                        <th>{{quant.locationName}}</th>\n                                        <th>{{quant.MachineNo}}</th>\n                                        <th>{{quant.productName}}</th>\n                                        <th>{{quant.quantity}}</th>\n                                </tr>\n                        </table>\n                </div>\n\n                <!-- Get license plate of driver -->\n                \n                <div class=\"tableContainer\" *ngIf=\"showlicenseplates\">\n                        <h2 class=\"tableLabel\" (click)=\"showlicenseplates = !showlicenseplates\" >Drivers and their cooresponding license plates</h2>\n                        <table  class=\"innerTable\">\n                                <tr>\n                                        <th>Driver ID</th>\n                                        <th>License Plate</th>\n\n                                </tr>\n                                <tr *ngFor=\"let driver of drivervehicle\">\n                                        <th>{{driver.driverID}}</th>\n                                        <th>{{driver.licensePlate}}</th>\n\n                                </tr>\n                        </table>\n                </div>\n\n                <p class =\"bold\">Please input the max price you want to show products for:</p>  \n                <input id =\"price\" type=\"text\" placeholder=\"\">\n                <button class = \"submit\" id =\"submitname\"  (click)= \"showProductsLessThanACertainPrice()\">Search products</button>\n                \n                <div>\n                        <table style=\"background-color: rgb(220, 217, 217);border: 1px solid black;\">\n                                <tr>\n                                        <th>Product Name</th>\n                                        <th>Product ISBM</th>\n                                        <th>Product Price</th>\n\n                                </tr>\n                                <tr *ngFor=\"let max of displayMaxPrice\">\n                                        <th>{{max.productName}}</th>\n                                        <th>{{max.productISBN}}</th>\n                                        <th>{{max.productPrice}}</th>\n\n                                </tr>\n                        </table>\n                </div>\n        </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ConfigService } from './app.component'\n;import { HttpClientModule } from '@angular/common/http';\n  \n// UI n  \nimport {MatTableModule, MatTableDataSource} from '@angular/material/table';\nimport { HttpClient, HttpHandler } from '@angular/common/http';\n\n@NgModule({\n  \n  declarations: [\n    AppComponent,\n    LoginComponent,\n  ],\n  imports: [\n    MatTableModule,\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule\n  ],\n  providers: [\n    ConfigService,\n    HttpClient,\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '', pathMatch: 'full'},\n\n  {\n    path: 'login',\n    component: LoginComponent,\n  },\n \n \n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  loggedIn: boolean = false;\n  username;\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n    this.checkLoggedIn();\n  }\n\n  checkLoggedIn() {\n    let value = localStorage.getItem('loggedIn');\n    if (value === 'true') {\n      this.loggedIn = true;\n      this.username = localStorage.getItem('username');\n    }\n    else {\n      this.loggedIn = false;\n    }\n  }\n\n  login() {\n    let username: string = (document.getElementById(\"username\") as HTMLInputElement).value;\n    let password: string = (document.getElementById(\"password\") as HTMLInputElement).value;\n\n    // #### TEMP ####\n    if (username !== \"admin\" || password !== \"pokes123\") return;\n    // #### TEMP ####\n    \n    localStorage.setItem('loggedIn','true');\n    localStorage.setItem('username', username);\n\n    this.checkLoggedIn();\n    setTimeout(() => {\n      this.router.navigate(['/']);\n    }, 500);\n  }\n\n  logout() {\n    \n    localStorage.removeItem('loggedIn');\n    localStorage.removeItem('username');\n\n    this.checkLoggedIn();\n    setTimeout(() => {\n      this.router.navigate(['/']);\n    }, 1000);\n  }\n}\n","<div class=\"login-div\">\n    <div *ngIf=\"!loggedIn\">\n\n        <h1>Log in:</h1>\n        <div class = \"CourseNumber\">   \n            <p class =\"bold\">Username:</p>  \n            <input id =\"username\" type=\"text\" placeholder=\"Username\">\n            </div>\n        <br/>\n        <div class = \"CourseNumber\">   \n            <p class =\"bold\">Password:</p>  \n            <input id =\"password\" type=\"password\" placeholder=\"Password\">\n            </div>\n        <br/>\n        \n        \n        <button class = \"submit\" id =\"submitname\"  (click)= \"login()\">Log In</button>\n    </div>\n    <div *ngIf=\"loggedIn\">\n\n        <h1>Log Out {{this.username}}</h1>\n\n        <button class = \"submit\" id =\"submitname\"  (click)= \"logout()\">Log Out</button>\n    </div>\n</div>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}